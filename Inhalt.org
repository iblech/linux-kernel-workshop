* 1 Einleitung
** Überblick über Vortrag
   - einmal das inhaltsverzeichnis zeigen, kurz zusammenfassung
** Wer bin ich
   - Richard Sailer
** Warum linux kernel entwicklung
** kann ich da einfach so mittmachen?
   - ja

** Was kann ich nach dem kurs realistisch was nicht


* 2 Die Repos und der Entwicklungsprozess
  - git.kernel.org
  - ui es gibt verschiedene repos wie läuft das?
    - bild von entwicklungsprozess
  - 1-2 remotes auschecken
  - (alles in ein repo)
  - es gibt releases alles 6-7 Wochen (Wie 4.3 4.4 usw.)
  - Das läuft so
    - Zu Beginn: merge window (2 wochen): linux torvalds halt alles
    - dann fixes (rc1 , rc2 usw.)
      - meistens bis rc7
    - dann irgendwann final release 4.3


* 3 Der Sourcecode (Überblick)
  - Kurz erzählen was die ganzen unterordner bedeuten
    - ~mm/~ ist memory managment
    - ~net/~ ist der network code
    - ~kernel/~ enthält scheduler und alles was auch in einem micro kernel system teil vom kernel wäre
    - ~fs~ ist filesystem
    - usw.
  - in netzwerk ordner rein gehen und code anschauen/erklären
    - verwendete demo war: ~net/ipv4/tcp_timer.c~
    - insbesondere der Retransmission timer

** Der Documentation Unterordner
   - grundsätzlich gilt: doku lesen ist einfacher als Code lesen
   - wichtige files für Einsteiger:
     - ~SubmittingPatches~
     - ~README~
     - Oft gibt es einen Ordner für das Subsystem an dem man werkelt, mit einer faq file drin

* 4 Kompilieren und Testen
- ~make~
- ~make deb-pkg~

* 5 Die Mailinglisten
  - live-demo was da so abgeht
    - gezeigt wurde hauptsächlich netdev
  - kurz über lkml reden: lieber nicht (200-300 Mails pro Tag)
  - für eigene patches besser: liste für das eigene subsystem

* 6 Patches bauen und senden mit git-send-email
  - ~perl /scripts/checkpatch~ anwenden

  - Maintainer finden mit: ~perl /scripts/get_maintainer -f <filename>~

  - Erst commiten in lokales repo

  - Senden mit ~git send-email~
    - Demo:
      - shellbefehl: ~git send-email -1 --subject-prefix="PATCH net"  --to=richi235@arcor.de~
        - ~-1~ : sendet 1 commit (1 rückwärts von HEAD)
        - ~--to=~ legt Empfänger fest, bei mehreren Empfängern mehrere ~--to=~
      - .gitconfig gezeigt
        - der verwendete mail server usw stehen hier
        - muss auf jeden fall vorher konfiguriert werden
    - Gutes tutorial zu git send-email: https://burzalodowa.wordpress.com/2013/10/05/how-to-send-patches-with-git-send-email/
  - Wichtig:
    - immer erst zum testen an sich selber schick
* 7 Buchempfehlungen und gute Quellen

** Gute Bücher:
   - Operating Systems (Design and Implementation) Andrew Tannenbaum
   - Das C Buch von O'reily
** Online Quellen
*** Viel lesen
*** Goooooogeln!!!!!!!!!!!!!!
    - erst wenn man nach 10-15 min nichts gefunden hat
      - die weiteren quellen ankucken

*** In Documentation Ordner vom Kernel Schauen!

*** Kernel Newbies Mailing liste
    - zeigen (in thunderbird)
*** Kernelnewbies irc channel
    - zeigen
    - sehr freundliche menschen da
    - nur fragen stellen wenn man vorher schon mal 10-15 min gegoogelt/gesucht hat und nix gefunden hat!

*** Quellcode lesen
**** Pro
     - kann jede frage beantworten
     - maximale genauigkeit
**** Contra
     - sehr zeitintensiv
     - oft zu genau, man hätte es gerne "zusammengefasst" oder "abstrahiert"


* 8 Fragen und Zeitpuffer
